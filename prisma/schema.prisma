// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  SUPERADMIN
  ADMIN
  CONTRIBUTOR
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?  // optional, can be null until user updates it
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mediaItems   MediaItem[]   @relation("UserMediaItems")
  collections  Collection[]  @relation("CreatedCollections")

}

enum MediaType {
  AUDIO
  VIDEO
  IMAGE
  BOOK
  DOCUMENT
  LINK
  PDF
  DOC
  OTHER
}


model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  image        String?       // Image URL or path
  subcategories SubCategory[]
  createdAt    DateTime      @default(now())
}

model SubCategory {
  id          String       @id @default(cuid())
  name        String
  description String?
  image       String?      // Image URL or path
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
  mediaItems  MediaItem[]
  createdAt   DateTime @default(now())
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  description String?
  image     String?    // optional icon or preview
  parent    Folder?    @relation("Subfolders", fields: [parentId], references: [id])
  parentId  String?
  children  Folder[]   @relation("Subfolders")
  mediaItems MediaItem[]

  createdAt DateTime   @default(now())
}

model MediaItem {
  id             String       @id @default(cuid())
  title          String
  description    String
  fileUrl        String?
  externalLink   String?
  image          String?
  mediaType      MediaType
  language       String?

  contributor    User         @relation("UserMediaItems", fields: [contributorId], references: [id])
  contributorId  String

  subCategory    SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId  String?

  folder         Folder?      @relation(fields: [folderId], references: [id])
  folderId       String?

  tags           Tag[]        @relation("MediaItemTags")
  collections    Collection[] @relation("CollectionItems")
  createdAt      DateTime     @default(now())
}

model Tag {
  id         String       @id @default(cuid())
  name       String       @unique
  mediaItems MediaItem[] @relation("MediaItemTags")
}

model Collection {
  id          String        @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  createdBy   User          @relation("CreatedCollections", fields: [createdById], references: [id])
  createdById String
  items       MediaItem[]   @relation("CollectionItems")
  createdAt   DateTime      @default(now())
}


model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // Markdown or HTML
  bannerUrl   String?  // Optional blog banner
  published   Boolean  @default(false)
  publishedAt DateTime?
  author      String   @default("Unknown")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}